<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">



<title type="text">PHYS-5319 - Mathematical Methods in Physics III - Spring 2023 - MW 10:30-11:45 @ SH 315</title>
<generator uri="https://github.com/mojombo/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="http:/MMP2023S/feed.xml" />
<link rel="alternate" type="text/html" href="http:/MMP2023S/" />
<updated>2023-04-16T23:37:20-05:00</updated>
<id>http:/MMP2023S/</id>
<author>
  <name>Amir Shahmoradi</name>
  <uri>http:/MMP2023S/</uri>
  <email>bagheri.fateme@gmail.com</email>
</author>


<entry>
  <title type="html"><![CDATA[Quiz 3: Object-Oriented Programming (OOP) basics]]></title>
  <link rel="alternate" type="text/html" href="http:/MMP2023S/quiz/3-oop"/>
  <id>http:/MMP2023S/quiz/3-oop</id>
  <published>2023-04-17T00:00:00-05:00</published>
  <updated>2023-04-17T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/MMP2023S</uri>
    <email>bagheri.fateme@gmail.com</email>
  </author>
  
  <content type="html">
  
    &lt;!--
This is the solution to [Quiz 1: Problems - Version control system](1-problems-version-control-system.html){:target=&quot;_blank&quot;}.

The following figure illustrates the grade distribution for this quiz.
&lt;figure&gt;
    &lt;img src=&quot;http:/MMP2023S/quiz/gradeDist/gradeHistQuiz1.png&quot; width=&quot;700&quot;&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;
        Maximum possible points is 1.
    &lt;/figcaption&gt;
&lt;/figure&gt;
--&gt;

&lt;p&gt;This quiz aims at testing your basic knowledge of programming.&lt;br /&gt;
Don’t forget to push your answers to your remote repository by the end of quiz time. Push all your answers to &lt;strong&gt;quiz/3/&lt;/strong&gt; folder in your Github project.&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cdslab.org/recipes/programming/oop-parabola/oop-parabola&quot; target=&quot;_blank&quot;&gt;Parabola as a subclass of line&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Briefly&lt;/strong&gt; describe the notion of encapsulation in OOP.&lt;/li&gt;
  &lt;li&gt;What is the Diamond Problem in OOP and how is it resolved in Python?&lt;/li&gt;
&lt;/ol&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/MMP2023S/quiz/3-oop&quot;&gt;Quiz 3: Object-Oriented Programming (OOP) basics&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/MMP2023S&quot;&gt;PHYS-5319 - Mathematical Methods in Physics III - Spring 2023 - MW 10:30-11:45 @ SH 315&lt;/a&gt; on April 17, 2023.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Quiz 2: Programming basics]]></title>
  <link rel="alternate" type="text/html" href="http:/MMP2023S/quiz/2-programming"/>
  <id>http:/MMP2023S/quiz/2-programming</id>
  <published>2023-04-05T00:00:00-05:00</published>
  <updated>2023-04-05T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/MMP2023S</uri>
    <email>bagheri.fateme@gmail.com</email>
  </author>
  
  <content type="html">
  
    &lt;!--
This is the solution to [Quiz 1: Problems - Version control system](1-problems-version-control-system.html){:target=&quot;_blank&quot;}.

The following figure illustrates the grade distribution for this quiz.
&lt;figure&gt;
    &lt;img src=&quot;http:/MMP2023S/quiz/gradeDist/gradeHistQuiz1.png&quot; width=&quot;700&quot;&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;
        Maximum possible points is 1.
    &lt;/figcaption&gt;
&lt;/figure&gt;
--&gt;

&lt;p&gt;This quiz aims at testing your basic knowledge of programming. Don’t forget to push your answers to your remote repository by the end of quiz time. Push all your answers to &lt;strong&gt;quiz/2/&lt;/strong&gt; folder in your Github project.&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;(A) What is the closest programming language to machine code (i.e., binary code)?&lt;/p&gt;

    &lt;p&gt;(B) Does it need interpretation in order to become machine-comprehensible?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;(A) Name the oldest high-level programming language.&lt;/p&gt;

    &lt;p&gt;(B) Approximately how many decades is it old? ($\pm15$ years is acceptable answer. the decade it was created is also an acceptable answer)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In what decades C, C++, and MATLAB/Python were created, respectively?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Name an ancestor programming language of C.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Name a programming language ancestor of C++.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Consider the following C++ code.
    &lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;int getSquare(int num) {
    return num * num;
}

int main(){
    return getsquare(2);
}
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;What kind of programming error does this code contain?
&lt;strong&gt;Hint&lt;/strong&gt;: You can copy and paste this code to &lt;a href=&quot;https://godbolt.org/&quot;&gt;https://godbolt.org/&lt;/a&gt; to see the compiler message (by choosing the C++ language from the drop-down menu).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Consider the following Python code.
    &lt;pre&gt;&lt;code class=&quot;language-fortran&quot;&gt;&quot;&quot;&quot;
Return `True` if the input integer is even.
&quot;&quot;&quot;
def isEven(int): return int / 2 == float(int) / 2
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;Does this code contain any kind of programming error?
If you believe it contains an error, what kind of error is it?
Otherwise explain how it yields the correct answer.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Consider the following Fortran code.
    &lt;pre&gt;&lt;code class=&quot;language-fortran&quot;&gt;real :: array(0 : 2)
print *, array(3)
end
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;Does this code contain any kind of programming error? Why?
&lt;strong&gt;Hint&lt;/strong&gt;: You can copy and paste this code to &lt;a href=&quot;https://godbolt.org/&quot;&gt;https://godbolt.org/&lt;/a&gt; to see the
Fortran compiler behavior (by choosing the &lt;code&gt;x86-64 gfortran (trunk)&lt;/code&gt; compiler from the drop-down menu).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Suppose you write a program that has memory leak. What type of programming error are you dealing with?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What are the order-of-magnitudes of the largest &lt;code&gt;32&lt;/code&gt;-bit and &lt;code&gt;64&lt;/code&gt;-bit IEEE integers?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What are the the smallest and the largest exponents in base &lt;code&gt;10&lt;/code&gt; that are representable with &lt;code&gt;32&lt;/code&gt;-bit and &lt;code&gt;64&lt;/code&gt;-bit IEEE real/float values?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Suppose you invent a integer binary storage for computers composed of 5-bits.
What would be the range of signed integer values in your custom representation?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Consider the IEEE 754 single-precision 32-bit float.
How many floats can be represented with such a storage scheme?
How many subnormal values do exist in this storage scheme?
How many infinite values do exist in this storage scheme?
How many NaN values do exist in this storage scheme?
What bit pattern would correspond to an infinity?
What bit pattern would correspond to a subnormal?
What bit pattern would correspond to a NaN?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Why are chaotic phenomena hard to simulate by digital computers?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What is the difference between mutable and immutable objects in computer programming?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Write a recursive function in your favorite programming language that takes a vector of integers as input and outputs the minimum value.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Suppose you implement the matrix multiplication of a large square matrix of size &lt;code&gt;ndim&lt;/code&gt; by &lt;code&gt;ndim&lt;/code&gt;
with a column vector of similar size &lt;code&gt;ndim&lt;/code&gt; using the naive definition of matrix multiplication in both C and Fortran.
Which version of your code would run faster? C or Fortran? Why?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Suppose you implement the matrix multiplication of a row vector of size &lt;code&gt;ndim&lt;/code&gt; with a square
matrix of size &lt;code&gt;ndim&lt;/code&gt; by &lt;code&gt;ndim&lt;/code&gt; using the naive definition of matrix multiplication in both C and Fortran.
Which version of your code would run faster? C or Fortran? Why?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Consider the following C programs. Which one would run faster (without any compiler optimizations)? Why?&lt;br /&gt;
1)
    &lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;time.h&amp;gt;
int matrix[999][999];
void main()
{
    int i, j;
    for (i = 0; i &amp;lt; 999; i++)
        for (j = 0; j &amp;lt; 999; j++)
            matrix[i][j] = matrix[i][j] + (matrix[i][j] * matrix[i][j]);
}
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;2)&lt;/p&gt;
    &lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;time.h&amp;gt;
int matrix[999][999];
void main()
{
    int i, j;
    for (j = 0; j &amp;lt; 999; j++)
        for (i = 0; i &amp;lt; 999; i++)
            matrix[i][j] = matrix[i][j] + (matrix[i][j] * matrix[i][j]);
}
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;Consider the following Fortran program. Which loop would run faster in this program (without any compiler optimizations)? Why?&lt;br /&gt;
1)
    &lt;pre&gt;&lt;code class=&quot;language-fortran&quot;&gt;integer :: i, j, matrix(999, 999)
do i = 1, 999
    do j = 1, 999
        matrix(i,j) = matrix(i,j) + (matrix(i,j) * matrix(i,j))
    end do
end do
end
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;2)&lt;/p&gt;
    &lt;pre&gt;&lt;code class=&quot;language-fortran&quot;&gt;integer :: i, j, matrix(999, 999)
do j = 1, 999
    do i = 1, 999
        matrix(i,j) = matrix(i,j) + (matrix(i,j) * matrix(i,j))
    end do
end do
end
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Representing matrices as lists in Python can be extremely slow.&lt;br /&gt;
Why are lists unsuitable for numerical storage and fast computation?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;What are the three fundamental components of a Turing-complete language?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Suppose we have the following matrix. Can you think of a storage scheme for this matrix that could lead to significant memory saving?
    &lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;my_matrix = [ [ 0 , 0 , 0 , 1 ]
            , [ 2 , 0 , 0 , 0 ]
            , [ 0 , 5 , 0 , 0 ]
            , [ 0 , 0 , 0 , 3 ]
            , [ 0 , 0 , 8 , 0 ]
            ]
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ol&gt;


  
  &lt;p&gt;&lt;a href=&quot;http:/MMP2023S/quiz/2-programming&quot;&gt;Quiz 2: Programming basics&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/MMP2023S&quot;&gt;PHYS-5319 - Mathematical Methods in Physics III - Spring 2023 - MW 10:30-11:45 @ SH 315&lt;/a&gt; on April 05, 2023.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Chapter 3: Programming paradigms]]></title>
  <link rel="alternate" type="text/html" href="http:/MMP2023S/lecture/3-oop"/>
  <id>http:/MMP2023S/lecture/3-oop</id>
  <published>2023-04-01T00:00:00-05:00</published>
  <updated>0000-00-00T00:00:00-00:00</updated>
  
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/MMP2023S</uri>
    <email>bagheri.fateme@gmail.com</email>
  </author>
  
  <content type="html">
  
    
&lt;p&gt;This lecture aims at providing an overview of computer programming history and, in particular, Python, as we well as popular implementations of Python interpreter and editors and how to install them.&lt;/p&gt;

&lt;div class=&quot;post_toc&quot;&gt;&lt;/div&gt;

&lt;p&gt;The material for this lecture can be found at:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cdslab.org/python/notes/object-oriented-programming/instantiation/instantiation.html&quot; target=&quot;_blank&quot;&gt;Object-Oriented Programming(OOP): Instantiation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cdslab.org/python/notes/object-oriented-programming/encapsulation/encapsulation.html&quot; target=&quot;_blank&quot;&gt;Object-Oriented Programming(OOP): Encapsulation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cdslab.org/python/notes/object-oriented-programming/inheritance/inheritance.html&quot; target=&quot;_blank&quot;&gt;Object-Oriented Programming(OOP): Inheritance&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


  
  &lt;p&gt;&lt;a href=&quot;http:/MMP2023S/lecture/3-oop&quot;&gt;Chapter 3: Programming paradigms&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/MMP2023S&quot;&gt;PHYS-5319 - Mathematical Methods in Physics III - Spring 2023 - MW 10:30-11:45 @ SH 315&lt;/a&gt; on April 01, 2023.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Homework 3: Programming: Object-Oriented Paradigm]]></title>
  <link rel="alternate" type="text/html" href="http:/MMP2023S/homework/3-programming-oop"/>
  <id>http:/MMP2023S/homework/3-programming-oop</id>
  <published>2023-04-01T00:00:00-05:00</published>
  <updated>2023-04-01T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/MMP2023S</uri>
    <email>bagheri.fateme@gmail.com</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;♣ &lt;strong&gt;Due Date: Monday April 17, 2023 10:45 AM&lt;/strong&gt;. This homework aims at giving you some experience with the syntax of Python and programming via Python.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cdslab.org/recipes/programming/oop-integration-simpson/oop-integration-simpson&quot; target=&quot;_blank&quot;&gt;Implementing an integration problem via an integrand object&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cdslab.org/recipes/programming/oop-projectile/oop-projectile&quot; target=&quot;_blank&quot;&gt;Projectile motion implementation through OOP multiple inheritance&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/MMP2023S/homework/3-programming-oop&quot;&gt;Homework 3: Programming: Object-Oriented Paradigm&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/MMP2023S&quot;&gt;PHYS-5319 - Mathematical Methods in Physics III - Spring 2023 - MW 10:30-11:45 @ SH 315&lt;/a&gt; on April 01, 2023.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Homework 2: Programming Basics]]></title>
  <link rel="alternate" type="text/html" href="http:/MMP2023S/homework/2-programming-basics"/>
  <id>http:/MMP2023S/homework/2-programming-basics</id>
  <published>2023-02-26T00:00:00-06:00</published>
  <updated>2023-02-26T00:00:00-06:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/MMP2023S</uri>
    <email>bagheri.fateme@gmail.com</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;♣ &lt;strong&gt;Due Date: Monday April 3, 2023 10:45 AM&lt;/strong&gt;. This homework aims at giving you some experience with the syntax of Python and programming via Python.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cdslab.org/recipes/programming/digital-storage-real-number/digital/digital-storage-real-number&quot; target=&quot;_blank&quot;&gt;IEEE-storage convention for real numbers&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cdslab.org/recipes/programming/integer-overflow/integer-overflow&quot; target=&quot;_blank&quot;&gt;Integer overflow&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cdslab.org/recipes/programming/python-variable-aliasing-copying/python-variable-aliasing-copying&quot; target=&quot;_blank&quot;&gt;Python aliasing vs. copying variables&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cdslab.org/recipes/programming/python-call-script-from-bash/python-call-script-from-bash&quot; target=&quot;_blank&quot;&gt;Python script call from the Bash command line&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cdslab.org/recipes/programming/modifying-loop-index-value/modifying-loop-index-value&quot; target=&quot;_blank&quot;&gt;Python Modifying the index of a for-loop&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cdslab.org/recipes/programming/precision-error-paradox/precision-error-paradox&quot; target=&quot;_blank&quot;&gt;Impact of machine precision on numerical computation&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cdslab.org/recipes/programming/roundoff-error-paradox/roundoff-error-paradox&quot; target=&quot;_blank&quot;&gt;Impact of round-off errors on numerical computations&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cdslab.org/recipes/programming/string-concatenation-using-for-loop/string-concatenation-using-for-loop&quot; target=&quot;_blank&quot;&gt;String concatenation using for-loop&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cdslab.org/recipes/programming/fibonacci-sequence-via-for-loop/fibonacci-sequence-via-for-loop&quot; target=&quot;_blank&quot;&gt;Computing the Fibonacci sequence via for-loop&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cdslab.org/recipes/programming/largest-prime-number-smaller-than-input/largest-prime-number-smaller-than-input&quot; target=&quot;_blank&quot;&gt;Getting the largest prime number smaller than the input value&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cdslab.org/recipes/programming/fibonacci-sequence-via-recursive-function-calls/fibonacci-sequence-via-recursive-function-calls&quot; target=&quot;_blank&quot;&gt;Computing the Fibonacci sequence via recursive function calls&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cdslab.org/recipes/programming/finding-maximum-location-via-recursive-function/finding-maximum-location-via-recursive-function&quot; target=&quot;_blank&quot;&gt;Finding the position of the maximum value of an array via recursive function calls&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cdslab.org/recipes/programming/visualization-coloring/visualization-coloring&quot; target=&quot;_blank&quot;&gt;Best visualization coloring&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cdslab.org/recipes/programming/python-packaging/python-packaging&quot; target=&quot;_blank&quot;&gt;Modules and packaging&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cdslab.org/recipes/programming/visualization-avg-precipitation-choropleth/visualization-avg-precipitation-choropleth&quot; target=&quot;_blank&quot;&gt;Visualizing the average precipitation among the US states&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cdslab.org/recipes/programming/formatted-input-to-csv-output/formatted-input-to-csv-output&quot; target=&quot;_blank&quot;&gt;Data transfer: Converting formatted input to Comma-Separated-Values (CSV) output&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cdslab.org/recipes/programming/parsing-data-from-web/parsing-data-from-web&quot; target=&quot;_blank&quot;&gt;Parsing data from the World Wide Web&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cdslab.org/recipes/programming/reading-data-from-web/reading-data-from-web&quot; target=&quot;_blank&quot;&gt;Reading data from the World Wide Web&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cdslab.org/recipes/programming/random-walk-central-limit-theorem/random-walk-central-limit-theorem&quot; target=&quot;_blank&quot;&gt;Understanding the Central Limit Theorem via random walk&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cdslab.org/recipes/programming/monte-carlo-approximation-of-heart-area/monte-carlo-approximation-of-heart-area&quot; target=&quot;_blank&quot;&gt;Monte Carlo approximation of the area of heart&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cdslab.org/recipes/programming/simulating-monty-hall-game/simulating-monty-hall-game&quot; target=&quot;_blank&quot;&gt;Simulating the Monty Hall game&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/MMP2023S/homework/2-programming-basics&quot;&gt;Homework 2: Programming Basics&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/MMP2023S&quot;&gt;PHYS-5319 - Mathematical Methods in Physics III - Spring 2023 - MW 10:30-11:45 @ SH 315&lt;/a&gt; on February 26, 2023.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Quiz 1: Version control system]]></title>
  <link rel="alternate" type="text/html" href="http:/MMP2023S/quiz/1-version-control-system"/>
  <id>http:/MMP2023S/quiz/1-version-control-system</id>
  <published>2023-02-13T00:00:00-06:00</published>
  <updated>2023-02-13T00:00:00-06:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/MMP2023S</uri>
    <email>bagheri.fateme@gmail.com</email>
  </author>
  
  <content type="html">
  
    &lt;!--
This is the solution to [Quiz 1: Problems - Version control system](1-problems-version-control-system.html){:target=&quot;_blank&quot;}.  

The following figure illustrates the grade distribution for this quiz.  
&lt;figure&gt;
    &lt;img src=&quot;http:/MMP2023S/quiz/gradeDist/gradeHistQuiz1.png&quot; width=&quot;700&quot;&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;
        Maximum possible points is 1.
    &lt;/figcaption&gt;
&lt;/figure&gt;
--&gt;

&lt;p&gt;This quiz aims at testing your basic knowledge of Version Control System. Don’t forget to push your answers to your remote repository by the end of quiz time. Push all your answers to &lt;strong&gt;quiz/1/&lt;/strong&gt; folder in your Github project.&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Name the three generations of VCS. Briefly describe how each paradigm works and a problem that it resolves in the previous generation.
&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Which VCS generation does &lt;code&gt;git&lt;/code&gt; software belong to?&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Which of the following Git commands can add all the &lt;strong&gt;new&lt;/strong&gt; and &lt;strong&gt;modified-existing&lt;/strong&gt; files to the staging area? choose all that apply.&lt;br /&gt;
&lt;br /&gt;
(A) &lt;code&gt;git add -A&lt;/code&gt;&lt;br /&gt;
(B) &lt;code&gt;git add --A&lt;/code&gt;&lt;br /&gt;
(C) &lt;code&gt;git add -all&lt;/code&gt;&lt;br /&gt;
(D) &lt;code&gt;git add --all&lt;/code&gt;&lt;br /&gt;
(E) &lt;code&gt;git add -u&lt;/code&gt;&lt;br /&gt;
(F) &lt;code&gt;git add .&lt;/code&gt;&lt;br /&gt;
(G) &lt;code&gt;git add .; git add -u&lt;/code&gt;&lt;br /&gt;
(H) &lt;code&gt;git add .; git add --u&lt;/code&gt;&lt;br /&gt;
(I) &lt;code&gt;git add -u; git add .&lt;/code&gt;&lt;br /&gt;
(J) &lt;code&gt;git add --u; git add .&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Which of the following Git commands &lt;strong&gt;both&lt;/strong&gt; stages and commits &lt;strong&gt;only modified and deleted files&lt;/strong&gt; but &lt;strong&gt;NOT&lt;/strong&gt; the &lt;em&gt;new files&lt;/em&gt; added to the repository since the last commit. Choose all that apply.&lt;br /&gt;
&lt;br /&gt;
(A) &lt;code&gt;git commit&lt;/code&gt;&lt;br /&gt;
(B) &lt;code&gt;git commit -a&lt;/code&gt;&lt;br /&gt;
(C) &lt;code&gt;git commit -am&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Write down the Git command that lists all Git commands for you.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Write down the Git command that lists all branches for you.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Write down the Git command that creates and checks out a new branch named &lt;code&gt;dev&lt;/code&gt; from the current branch.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Perform the following tasks on a Git command-line on your computer and copy and paste the output to your quiz response file.
    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;Initialize an empty project &lt;strong&gt;locally&lt;/strong&gt; on your system in a temporary folder. Copy the command and the Git output here.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Add a &lt;code&gt;README.md&lt;/code&gt; file to this project and add your name to it, save it and close it, then stage and commit it.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Now create a new branch &lt;code&gt;dev&lt;/code&gt; from the current branch and switch to it.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Modify the &lt;code&gt;README.md&lt;/code&gt; file by removing your name. Then, stage and commit the changes to the new branch.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Now merge this &lt;code&gt;dev&lt;/code&gt; branch with your &lt;code&gt;main&lt;/code&gt; branch and delete the new branch that you just created.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;List all existing branches in your project.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;Write down the Git command that lists all commits made to the project.&lt;/li&gt;
&lt;/ol&gt;


  
  &lt;p&gt;&lt;a href=&quot;http:/MMP2023S/quiz/1-version-control-system&quot;&gt;Quiz 1: Version control system&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/MMP2023S&quot;&gt;PHYS-5319 - Mathematical Methods in Physics III - Spring 2023 - MW 10:30-11:45 @ SH 315&lt;/a&gt; on February 13, 2023.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Chapter 2: Computer hardware, software, programming, and history]]></title>
  <link rel="alternate" type="text/html" href="http:/MMP2023S/lecture/2-history"/>
  <id>http:/MMP2023S/lecture/2-history</id>
  <published>2023-02-01T00:00:00-06:00</published>
  <updated>0000-00-00T00:00:00-00:00</updated>
  
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/MMP2023S</uri>
    <email>bagheri.fateme@gmail.com</email>
  </author>
  
  <content type="html">
  
    
&lt;p&gt;This lecture aims at providing an overview of computer programming history and, in particular, Python, as we well as popular implementations of Python interpreter and editors and how to install them.&lt;/p&gt;

&lt;div class=&quot;post_toc&quot;&gt;&lt;/div&gt;

&lt;p&gt;The material for this lecture can be found at:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cdslab.org/python/notes/preliminary-foundations/programming-history/programming-history.html&quot; target=&quot;_blank&quot;&gt;programming history&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cdslab.org/python/notes/preliminary-foundations/computer-program-structure/computer-program-structure.html&quot; target=&quot;_blank&quot;&gt;Computer program structure&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cdslab.org/python/notes/preliminary-foundations/python-for-beginners/python-for-beginners.html&quot; target=&quot;_blank&quot;&gt;Python for beginners&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


  
  &lt;p&gt;&lt;a href=&quot;http:/MMP2023S/lecture/2-history&quot;&gt;Chapter 2: Computer hardware, software, programming, and history&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/MMP2023S&quot;&gt;PHYS-5319 - Mathematical Methods in Physics III - Spring 2023 - MW 10:30-11:45 @ SH 315&lt;/a&gt; on February 01, 2023.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Chapter 1: Version Control Systems, Git, and GitHub]]></title>
  <link rel="alternate" type="text/html" href="http:/MMP2023S/lecture/1-vcs"/>
  <id>http:/MMP2023S/lecture/1-vcs</id>
  <published>2023-01-20T00:00:00-06:00</published>
  <updated>0000-00-00T00:00:00-00:00</updated>
  
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/MMP2023S</uri>
    <email>bagheri.fateme@gmail.com</email>
  </author>
  
  <content type="html">
  
    
&lt;p&gt;This lecture aims at providing an overview of the Version Control Systems (VCS) and how to use them for our needs in this course.&lt;/p&gt;

&lt;div class=&quot;post_toc&quot;&gt;&lt;/div&gt;

&lt;h3 id=&quot;version-control-systems-git-and-github&quot;&gt;Version Control Systems, Git, and GitHub&lt;/h3&gt;

&lt;p&gt;To lean about VCS, Git, and GitHub, we will follow the lecture notes available here,&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cdslab.org/python/notes/preliminary-foundations/version-control-system/version-control-system.html&quot; target=&quot;_blank&quot;&gt;Version Control System (VCS)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cdslab.org/recipes/programming/vcs-git-github-setup/vcs-git-github-setup&quot; target=&quot;_blank&quot;&gt;Setting Up Your Git Software and GitHub Account&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/MMP2023S/lecture/1-vcs&quot;&gt;Chapter 1: Version Control Systems, Git, and GitHub&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/MMP2023S&quot;&gt;PHYS-5319 - Mathematical Methods in Physics III - Spring 2023 - MW 10:30-11:45 @ SH 315&lt;/a&gt; on January 20, 2023.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Homework 1: Version Control Using Git and Github]]></title>
  <link rel="alternate" type="text/html" href="http:/MMP2023S/homework/1-vcs"/>
  <id>http:/MMP2023S/homework/1-vcs</id>
  <published>2023-01-20T00:00:00-06:00</published>
  <updated>2023-01-20T00:00:00-06:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/MMP2023S</uri>
    <email>bagheri.fateme@gmail.com</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;♣ &lt;strong&gt;Due Date: Monday Feb 13, 2023 1:00 PM&lt;/strong&gt;. This homework aims at giving you some experience on how to create Git branches, develop your project on multiple branches, merge them, resolve potential conflicts between different branches upon merging, and finally how to delete them. It also gives you some experience with using other commonly-used Git commands.&lt;/p&gt;

&lt;p&gt;Use the Markdown language to design a Github-interpretable README file for each of folders in your project for this course, and a Github web-page for your project. If you need help with Markdown, refer to the HW question below and our lecture notes for cheat-sheets.&lt;/p&gt;

&lt;p&gt;Write your code sections of your answer in Markdown syntax.
For example,&lt;br /&gt;
&lt;code&gt;
    ```bash  &lt;br /&gt;
    $ git branch -d test  &lt;br /&gt;
    error: Cannot delete branch &apos;test&apos; checked out at &apos;C:/Users/Fatemeh/git/foo&apos;  &lt;br /&gt;
    ```
&lt;/code&gt;
&lt;br /&gt;
will display the following text highlighted as &lt;em&gt;bash&lt;/em&gt; code, in your &lt;em&gt;readme.md&lt;/em&gt; file (albeit, with different style and color).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git branch -d test
error: Cannot delete branch &apos;test&apos; checked out at &apos;C:/Users/Fatemeh/git/foo&apos;
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cdslab.org/recipes/programming/vcs-using-git-github/vcs-using-git-github&quot; target=&quot;_blank&quot;&gt;Version-control using Git and GitHub&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;


  
  &lt;p&gt;&lt;a href=&quot;http:/MMP2023S/homework/1-vcs&quot;&gt;Homework 1: Version Control Using Git and Github&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/MMP2023S&quot;&gt;PHYS-5319 - Mathematical Methods in Physics III - Spring 2023 - MW 10:30-11:45 @ SH 315&lt;/a&gt; on January 20, 2023.&lt;/p&gt;</content>
</entry>

</feed>
